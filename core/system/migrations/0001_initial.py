# Generated by Django 5.2.4 on 2025-09-02 07:39

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('telegram_bots', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('name', models.CharField(max_length=150, verbose_name='Nombre de la categoría')),
                ('icon', models.CharField(default='fas fa-folder-open', max_length=150, verbose_name='Clase de ícono (Font Awesome)')),
                ('priority', models.IntegerField(default=0, verbose_name='Prioridad')),
                ('url', models.CharField(blank=True, default='', max_length=150, null=True, verbose_name='URL a la que redirige')),
                ('system', models.CharField(blank=True, choices=[('NONE', 'NONE'), ('SYSTEM', 'SYSTEM'), ('ADMINISTRACION', 'ADMINISTRACION'), ('OPERACIONES', 'OPERACIONES'), ('COMERCIAL', 'COMERCIAL'), ('SALE', 'VENTAS'), ('RH', 'RH')], default='NONE', max_length=150, null=True, verbose_name='Sistema')),
                ('is_active', models.BooleanField(default=True, verbose_name='¿Está activa?')),
            ],
            options={
                'verbose_name': 'Categoría del navbar',
                'verbose_name_plural': 'Categorías del navbar',
                'db_table': 'navbar_category',
                'ordering': ['priority'],
            },
        ),
        migrations.CreateModel(
            name='SystemUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('system', models.CharField(blank=True, choices=[('NONE', 'NONE'), ('SYSTEM', 'SYSTEM'), ('ADMINISTRACION', 'ADMINISTRACION'), ('OPERACIONES', 'OPERACIONES'), ('COMERCIAL', 'COMERCIAL'), ('SALE', 'VENTAS'), ('RH', 'RH')], default='NONE', max_length=150, null=True, verbose_name='Sistema')),
                ('calendar_url', models.CharField(blank=True, max_length=300, null=True, verbose_name='Calendario publico')),
                ('telegram_username', models.CharField(blank=True, max_length=255, null=True, verbose_name='Telegram Username')),
                ('doc_nombre', models.CharField(blank=True, max_length=255, null=True, verbose_name='Nombre de documentos')),
                ('doc_cargo', models.CharField(blank=True, max_length=255, null=True, verbose_name='Cargo de documentos')),
                ('doc_tel', models.CharField(blank=True, max_length=255, null=True, verbose_name='Telefono de documentos')),
                ('doc_mail', models.CharField(blank=True, max_length=255, null=True, verbose_name='Email de documentos')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='system_user', to='telegram_bots.telegramuser')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuario de sistema',
                'verbose_name_plural': 'Usuarios de sistema',
                'db_table': 'system_user',
                'ordering': ['id'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('name', models.CharField(max_length=150, verbose_name='Nombre de la sección')),
                ('icon', models.CharField(default='far fa-circle nav-icon', max_length=150, verbose_name='Clase de ícono (Font Awesome)')),
                ('priority', models.IntegerField(default=0, verbose_name='Prioridad')),
                ('url', models.CharField(blank=True, default='', max_length=150, null=True, verbose_name='URL a la que redirige')),
                ('is_active', models.BooleanField(default=True, verbose_name='¿Está activa?')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='system.category', verbose_name='Categoría a la que pertenece')),
            ],
            options={
                'verbose_name': 'Sección del navbar',
                'verbose_name_plural': 'Secciones del navbar',
                'db_table': 'navbar_section',
                'ordering': ['priority'],
            },
        ),
        migrations.CreateModel(
            name='UserPermission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('categories', models.ManyToManyField(to='system.category', verbose_name='¿A qué categorías tiene acceso el usuario?')),
                ('sections', models.ManyToManyField(to='system.section', verbose_name='¿A qué secciones tiene acceso el usuario?')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='permissions', to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Permiso de usuario',
                'verbose_name_plural': 'Permisos de usuarios',
                'db_table': 'user_permission',
                'ordering': ['id'],
            },
        ),
    ]
